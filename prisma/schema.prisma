// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Modèle pour les sessions de questions-réponses
model Session {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  name        String
  isActive    Boolean  @default(true) @map("is_active")
  accessCode  String?  @unique @map("access_code")
  expiresAt   DateTime? @map("expires_at")

  // Le lien vers l'utilisateur Supabase (un UUID stocké comme String)
  userId      String   @map("user_id")

  questions   Question[]

  @@map("sessions")
}

// Modèle pour les questions posées par l'audience
model Question {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  content     String
  authorName  String?  @map("author_name")
  isAnswered  Boolean  @default(false) @map("is_answered")
  upvotes     Int      @default(0)

  // Relation avec la table Session
  sessionId   Int      @map("session_id")
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("questions")
}